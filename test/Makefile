# Disable implicit rules
.SUFFIXES:

# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../googletest-release-1.8.0/googletest

# Where to find user code.
SRC_DIR = ../src
LGL_DIR = ../lingeling-bbc-9230380-160707
CUDD_DIR = ../cudd-3.0.0

CUDD_LIB_DIR1 = $(CUDD_DIR)/cplusplus/.libs
CUDD_LIB_DIR2 = $(CUDD_DIR)/cudd/.libs

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include \
            -I$(SRC_DIR) \
            -I$(CUDD_DIR)/cplusplus -I$(CUDD_DIR)/cudd\
            -I$(LGL_DIR)

# Flags passed to the C++ compiler.
CXXFLAGS += -Wall -O3 -Wextra -pthread -std=c++11

# Flags passed to the C++ linker
LFLAGS = -L$(CUDD_LIB_DIR1) -L$(CUDD_LIB_DIR2) -L$(LGL_DIR) -L$(SRC_DIR)


# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
#TESTS = zchaff_sat_learner_test bdd_learner_test lgl_sat_learner_test lgl2_sat_learner_test
TESTS = bdd_learner_test lgl_sat_learner_test

TESTS_CPP = $(TESTS:=.cpp) 
TESTS_OBJ = $(TESTS:=.o)

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : libvesc.a compile run

libvesc.a:
	make -C $(SRC_DIR) all

compile : gtest_main

run:
	./gtest_main 

clean :
	rm -f gtest_main gtest.a gtest_main.a *.o $(TESTS_CPP)

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds google test. 
util.o: util.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $<


lgl_sat_learner_test.cpp: learner_test_template.cpp
	sed 's/__TESTTYPE__/LglSatLearner/g' $< > $@

bdd_learner_test.cpp: learner_test_template.cpp
	sed 's/__TESTTYPE__/BddLearner/g' $< > $@

$(TESTS_OBJ): %.o: %.cpp $(GTEST_HEADERS) $(SRC_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $<

gtest_main: libvesc.a $(TESTS_OBJ) util.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(TESTS_OBJ) util.o gtest_main.a $(LFLAGS) -lpthread -lvesc -lobj -lcudd -llgl -o $@

